[
  {
    "timeToFix": 5,
    "patternId": "consistency_exception_names",
    "title": "Consistency Exception Names",
    "description": "Exception names should end with a common suffix like \"Error\"."
  },
  {
    "timeToFix": 5,
    "patternId": "consistency_line_endings",
    "title": "Consistency Line Endings",
    "description": "Windows and Linux/macOS systems use different line-endings in files."
  },
  {
    "timeToFix": 5,
    "patternId": "consistency_multi_alias_import_require_use",
    "title": "Consistency Multi Alias Import Require Use",
    "description": "When using alias, import, require or use for multiple names from the same namespace, you have two options:"
  },
  {
    "timeToFix": 5,
    "patternId": "consistency_parameter_pattern_matching",
    "title": "Consistency Parameter Pattern Matching",
    "description": "When capturing a parameter using pattern matching you can either put the parameter name before or after the value i.e."
  },
  {
    "timeToFix": 5,
    "patternId": "consistency_space_around_operators",
    "parameters": [
      {
        "description": "List of operators to be ignored for this check.",
        "name": "ignore"
      }
    ],
    "title": "Consistency Space Around Operators",
    "description": "Use spaces around operators like `+`, `-`, `*` and `/`. This is the **preferred** way, although other styles are possible, as long as it is applied consistently."
  },
  {
    "timeToFix": 5,
    "patternId": "consistency_space_in_parentheses",
    "parameters": [
      {
        "description": "Allows [], %{} and similar empty enum values to be used regardless of spacing throughout the codebase.",
        "name": "allow_empty_enums"
      }
    ],
    "title": "Consistency Space In Parentheses",
    "description": "Don't use spaces after `(`, `[`, and `{` or before `}`, `]`, and `)`. This is the **preferred** way, although other styles are possible, as long as it is applied consistently."
  },
  {
    "timeToFix": 5,
    "patternId": "consistency_tabs_or_spaces",
    "title": "Consistency Tabs Or Spaces",
    "description": "Tabs should be used consistently."
  },
  {
    "timeToFix": 5,
    "patternId": "consistency_unused_variable_names",
    "title": "Consistency Unused Variable Names",
    "description": "Elixir allows us to use `_` as a name for variables that are not meant to be used. But itâ€™s a common practice to give these variables meaningful names anyway (`_user` instead of `_`), but some people prefer to name them all `_`."
  },
  {
    "timeToFix": 5,
    "patternId": "design_alias_usage",
    "parameters": [
      {
        "description": "List of namespaces to be excluded for this check.",
        "name": "excluded_namespaces"
      },
      {
        "description": "List of lastnames to be excluded for this check.",
        "name": "excluded_lastnames"
      },
      {
        "description": "Only raise an issue if a module is nested deeper than this.",
        "name": "if_nested_deeper_than"
      },
      {
        "description": "Only raise an issue if a module is called more often than this.",
        "name": "if_called_more_often_than"
      }
    ],
    "title": "Design Alias Usage",
    "description": "Functions from other modules should be used via an alias if the module's namespace is not top-level."
  },
  {
    "timeToFix": 5,
    "patternId": "design_duplicated_code",
    "parameters": [
      {
        "description": "The minimum mass which a part of code has to have to qualify for this check.",
        "name": "mass_threshold"
      },
      {
        "description": "The number of nodes that need to be found to raise an issue.",
        "name": "nodes_threshold"
      },
      {
        "description": "List of macros to be excluded for this check.",
        "name": "excluded_macros"
      }
    ],
    "title": "Design Duplicated Code",
    "description": "Code should not be copy-pasted in a codebase when there is room to abstract the copied functionality in a meaningful way."
  },
  {
    "timeToFix": 5,
    "patternId": "design_tag_fixme",
    "parameters": [
      {
        "description": "Set to `true` to also include tags from @doc attributes.",
        "name": "include_doc"
      }
    ],
    "title": "Design Tag Fixme",
    "description": "FIXME comments are used to indicate places where source code needs fixing."
  },
  {
    "timeToFix": 5,
    "patternId": "design_tag_todo",
    "parameters": [
      {
        "description": "Set to `true` to also include tags from @doc attributes.",
        "name": "include_doc"
      }
    ],
    "title": "Design Tag Todo",
    "description": "TODO comments are used to remind yourself of source code related things."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_alias_as",
    "title": "Readability Alias As",
    "description": "Aliases which are not completely renamed using the `:as` option are easier to follow."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_alias_order",
    "title": "Readability Alias Order",
    "description": "Alphabetically ordered lists are more easily scannable by the read."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_block_pipe",
    "parameters": [
      {
        "description": "Do not raise an issue for these macros and functions.",
        "name": "exclude"
      }
    ],
    "title": "Readability Block Pipe",
    "description": "Pipes (`|>`) should not be used with blocks."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_function_names",
    "parameters": [
      {
        "description": "Allows acronyms like HTTP or OTP in function names.",
        "name": "allow_acronyms"
      }
    ],
    "title": "Readability Function Names",
    "description": "Function, macro, and guard names are always written in snake_case in Elixir."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_impl_true",
    "title": "Readability Impl True",
    "description": "When implementing behaviour callbacks, `@impl true` indicates that a function implements a callback, but a better way is to note the actual behaviour being implemented, for example `@impl MyBehaviour`. This not only improves readability, but adds extra validation in cases where multiple behaviours are implemented in a single module."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_large_numbers",
    "parameters": [
      {
        "description": "The check only reports numbers greater than this.",
        "name": "only_greater_than"
      }
    ],
    "title": "Readability Large Numbers",
    "description": "Numbers can contain underscores for readability purposes. These do not affect the value of the number, but can help read large numbers more easily."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_max_line_length",
    "parameters": [
      {
        "description": "",
        "name": "ignore_heredocs"
      },
      {
        "description": "The maximum number of characters a line may consist of.",
        "name": "max_length"
      },
      {
        "description": "Set to `true` to ignore lines including function definitions.",
        "name": "ignore_definitions"
      },
      {
        "description": "Set to `true` to ignore lines including `@spec`s.",
        "name": "ignore_specs"
      },
      {
        "description": "Set to `true` to ignore lines that are strings or in heredocs.",
        "name": "ignore_strings"
      },
      {
        "description": "Set to `true` to ignore lines that contain urls.",
        "name": "ignore_urls"
      }
    ],
    "title": "Readability Max Line Length",
    "description": "Checks for the length of lines."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_module_attribute_names",
    "title": "Readability Module Attribute Names",
    "description": "Module attribute names are always written in snake_case in Elixir."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_module_doc",
    "parameters": [
      {
        "description": "All modules matching this regex (or list of regexes) will be ignored.",
        "name": "ignore_names"
      }
    ],
    "title": "Readability Module Doc",
    "description": "Every module should contain comprehensive documentation."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_module_names",
    "title": "Readability Module Names",
    "description": "Module names are always written in PascalCase in Elixir."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_multi_alias",
    "title": "Readability Multi Alias",
    "description": "Multi alias expansion makes module uses harder to search for in large code bases."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_parentheses_in_condition",
    "title": "Readability Parentheses In Condition",
    "description": "Because `if` and `unless` are macros, the preferred style is to not use parentheses around conditions."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_parentheses_on_zero_arity_defs",
    "parameters": [
      {
        "description": "",
        "name": "parens"
      }
    ],
    "title": "Readability Parentheses On Zero Arity Defs",
    "description": "Either use parentheses or not when defining a function with no arguments."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_predicate_function_names",
    "title": "Readability Predicate Function Names",
    "description": "Predicate functions/macros should be named accordingly:"
  },
  {
    "timeToFix": 5,
    "patternId": "readability_prefer_implicit_try",
    "title": "Readability Prefer Implicit Try",
    "description": "Prefer using an implicit `try` rather than explicit `try` if you try to rescue anything the function does."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_redundant_blank_lines",
    "parameters": [
      {
        "description": "The maximum number of tolerated consecutive blank lines.",
        "name": "max_blank_lines"
      }
    ],
    "title": "Readability Redundant Blank Lines",
    "description": "Files should not have two or more consecutive blank lines."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_semicolons",
    "title": "Readability Semicolons",
    "description": "Don't use ; to separate statements and expressions. Statements and expressions should be separated by lines."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_separate_alias_require",
    "title": "Readability Separate Alias Require",
    "description": "All instances of `alias` should be consecutive within a file. Likewise, all instances of `require` should be consecutive within a file."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_single_pipe",
    "title": "Readability Single Pipe",
    "description": "Pipes (`|>`) should only be used when piping data through multiple calls."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_space_after_commas",
    "title": "Readability Space After Commas",
    "description": "You can use white-space after commas to make items of lists, tuples and other enumerations easier to separate from one another."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_specs",
    "title": "Readability Specs",
    "description": "Functions, callbacks and macros need typespecs."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_strict_module_layout",
    "parameters": [
      {
        "description": "List of atoms identifying the desired order of module parts.\n\nSupported values are:\n\n- `:moduledoc` - `@moduledoc` module attribute\n- `:shortdoc` - `@shortdoc` module attribute\n- `:behaviour` - `@behaviour` module attribute\n- `:use` - `use` expression\n- `:import` - `import` expression\n- `:alias` - `alias` expression\n- `:require` - `require` expression\n- `:defstruct` - `defstruct` expression\n- `:opaque` - `@opaque` module attribute\n- `:type` - `@type` module attribute\n- `:typep` - `@typep` module attribute\n- `:callback` - `@callback` module attribute\n- `:macrocallback` - `@macrocallback` module attribute\n- `:optional_callbacks` - `@optional_callbacks` module attribute\n- `:module_attribute` - other module attribute\n- `:public_fun` - public function\n- `:private_fun` - private function or a public function marked with `@doc false`\n- `:public_macro` - public macro\n- `:private_macro` - private macro or a public macro marked with `@doc false`\n- `:callback_impl` - public function or macro marked with `@impl`\n- `:public_guard` - public guard\n- `:private_guard` - private guard or a public guard marked with `@doc false`\n- `:module` - inner module definition (`defmodule` expression inside a module)\n\nNotice that the desired order always starts from the top.\n\nFor example, if you provide the order `~w/public_fun private_fun/a`,\nit means that everything else (e.g. `@moduledoc`) must appear after\nfunction definitions.\n",
        "name": "order"
      },
      {
        "description": "List of atoms identifying the module parts which are not checked, and may\ntherefore appear anywhere in the module. Supported values are the same as\nin the `:order` param.\n",
        "name": "ignore"
      }
    ],
    "title": "Readability Strict Module Layout",
    "description": "Provide module parts in a required order."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_string_sigils",
    "parameters": [
      {
        "description": "The maximum amount of escaped quotes you want to tolerate.",
        "name": "maximum_allowed_quotes"
      }
    ],
    "title": "Readability String Sigils",
    "description": "If you used quoted strings that contain quotes, you might want to consider switching to the use of sigils instead."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_trailing_blank_line",
    "title": "Readability Trailing Blank Line",
    "description": "Files should end in a trailing blank line."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_trailing_white_space",
    "parameters": [
      {
        "description": "Set to `false` to check lines that are strings or in heredocs",
        "name": "ignore_strings"
      }
    ],
    "title": "Readability Trailing White Space",
    "description": "There should be no white-space (i.e. tabs, spaces) at the end of a line."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_unnecessary_alias_expansion",
    "title": "Readability Unnecessary Alias Expansion",
    "description": "Alias expansion is useful but when aliasing a single module, it can be harder to read with unnecessary braces."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_variable_names",
    "title": "Readability Variable Names",
    "description": "Variable names are always written in snake_case in Elixir."
  },
  {
    "timeToFix": 5,
    "patternId": "readability_with_custom_tagged_tuple",
    "title": "Readability With Custom Tagged Tuple",
    "description": "Avoid using custom tags for error reporting from `with` macros."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_abc_size",
    "parameters": [
      {
        "description": "The maximum ABC size a function should have.",
        "name": "max_size"
      },
      {
        "description": "All functions listed will be ignored.",
        "name": "excluded_functions"
      }
    ],
    "title": "Refactor Abc Size",
    "description": "The ABC size describes a metric based on assignments, branches and conditions."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_append_single_item",
    "title": "Refactor Append Single Item",
    "description": "When building up large lists, it is faster to prepend than append. Therefore: It is sometimes best to prepend to the list during iteration and call Enum.reverse/1 at the end, as it is quite fast."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_cond_statements",
    "title": "Refactor Cond Statements",
    "description": "Each cond statement should have 3 or more statements including the \"always true\" statement."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_cyclomatic_complexity",
    "parameters": [
      {
        "description": "The maximum cyclomatic complexity a function should have.",
        "name": "max_complexity"
      }
    ],
    "title": "Refactor Cyclomatic Complexity",
    "description": "Cyclomatic complexity is a software complexity metric closely correlated with coding errors."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_double_boolean_negation",
    "title": "Refactor Double Boolean Negation",
    "description": "Having double negations in your code can obscure the parameter's original value."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_function_arity",
    "parameters": [
      {
        "description": "The maximum number of parameters which a function should take.",
        "name": "max_arity"
      },
      {
        "description": "Set to `true` to ignore private functions.",
        "name": "ignore_defp"
      }
    ],
    "title": "Refactor Function Arity",
    "description": "A function can take as many parameters as needed, but even in a functional language there can be too many parameters."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_long_quote_blocks",
    "parameters": [
      {
        "description": "The maximum number of lines a quote block should be allowed to have.",
        "name": "max_line_count"
      },
      {
        "description": "Ignores comments when counting the lines of a `quote` block.",
        "name": "ignore_comments"
      }
    ],
    "title": "Refactor Long Quote Blocks",
    "description": "Long `quote` blocks are generally an indication that too much is done inside them."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_match_in_condition",
    "title": "Refactor Match In Condition",
    "description": "Pattern matching should only ever be used for simple assignments inside `if` and `unless` clauses."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_module_dependencies",
    "parameters": [
      {
        "description": "Maximum number of module dependencies.",
        "name": "max_deps"
      },
      {
        "description": "List of dependency namespaces to include in this check",
        "name": "dependency_namespaces"
      },
      {
        "description": "List of namespaces to exclude from this check",
        "name": "excluded_namespaces"
      },
      {
        "description": "List of paths or regex to exclude from this check",
        "name": "excluded_paths"
      }
    ],
    "title": "Refactor Module Dependencies",
    "description": "This module might be doing too much. Consider limiting the number of module dependencies."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_negated_conditions_in_unless",
    "title": "Refactor Negated Conditions In Unless",
    "description": "Unless blocks should avoid having a negated condition."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_negated_conditions_with_else",
    "title": "Refactor Negated Conditions With Else",
    "description": "An `if` block with a negated condition should not contain an else block."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_negated_is_nil",
    "title": "Refactor Negated Is Nil",
    "description": "We should avoid negating the `is_nil` predicate function. Here are a couple of examples: The code here ...     def fun(%{external_id: external_id, id: id}) when not is_nil(external_id) do        ...     end"
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_nesting",
    "parameters": [
      {
        "description": "The maximum number of levels code should be nested.",
        "name": "max_nesting"
      }
    ],
    "title": "Refactor Nesting",
    "description": "Code should not be nested more than once inside a function."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_pipe_chain_start",
    "parameters": [
      {
        "description": "All functions listed will be ignored.",
        "name": "excluded_functions"
      },
      {
        "description": "All pipes with argument types listed will be ignored.",
        "name": "excluded_argument_types"
      }
    ],
    "title": "Refactor Pipe Chain Start",
    "description": "Pipes (`|>`) can become more readable by starting with a \"raw\" value."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_unless_with_else",
    "title": "Refactor Unless With Else",
    "description": "An `unless` block should not contain an else block."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_variable_rebinding",
    "parameters": [
      {
        "description": "Variables with a bang suffix will be ignored.",
        "name": "allow_bang"
      }
    ],
    "title": "Refactor Variable Rebinding",
    "description": "You might want to refrain from rebinding variables."
  },
  {
    "timeToFix": 5,
    "patternId": "refactor_with_clauses",
    "title": "Refactor With Clauses",
    "description": "`with` statements are useful when you need to chain a sequence of pattern matches, stopping at the first one that fails."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_application_config_in_module_attribute",
    "title": "Warning Application Config In Module Attribute",
    "description": "Module attributes are evaluated at compile time and not at run time. As a result, certain configuration read calls made in your module attributes may work as expected during local development, but may break once in a deployed context."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_bool_operation_on_same_values",
    "title": "Warning Bool Operation On Same Values",
    "description": "Boolean operations with identical values on the left and right side are most probably a logical fallacy or a copy-and-paste error."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_expensive_empty_enum_check",
    "title": "Warning Expensive Empty Enum Check",
    "description": "Checking if the size of the enum is `0` can be very expensive, since you are determining the exact count of elements."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_i_ex_pry",
    "title": "Warning I Ex Pry",
    "description": "While calls to IEx.pry might appear in some parts of production code, most calls to this function are added during debugging sessions."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_io_inspect",
    "title": "Warning Io Inspect",
    "description": "While calls to IO.inspect might appear in some parts of production code, most calls to this function are added during debugging sessions."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_leaky_environment",
    "title": "Warning Leaky Environment",
    "description": "OS child processes inherit the environment of their parent process. This includes sensitive configuration parameters, such as credentials. To minimize the risk of such values leaking, clear or overwrite them when spawning executables."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_map_get_unsafe_pass",
    "title": "Warning Map Get Unsafe Pass",
    "description": "`Map.get/2` can lead into runtime errors if the result is passed into a pipe without a proper default value. This happens when the next function in the pipe cannot handle `nil` values correctly."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_mix_env",
    "parameters": [
      {
        "description": "List of paths or regex to exclude from this check",
        "name": "excluded_paths"
      }
    ],
    "title": "Warning Mix Env",
    "description": "Mix is a build tool and, as such, it is not expected to be available in production. Therefore, it is recommended to access Mix.env only in configuration files and inside mix.exs, never in your application code (lib)."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_operation_on_same_values",
    "title": "Warning Operation On Same Values",
    "description": "Operations on the same values always yield the same result and therefore make little sense in production code."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_operation_with_constant_result",
    "title": "Warning Operation With Constant Result",
    "description": "Some numerical operations always yield the same result and therefore make little sense in production code."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_raise_inside_rescue",
    "title": "Warning Raise Inside Rescue",
    "description": "Using `Kernel.raise` inside of a `rescue` block creates a new stacktrace."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_unsafe_exec",
    "title": "Warning Unsafe Exec",
    "description": "Spawning external commands can lead to command injection vulnerabilities."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_unsafe_to_atom",
    "title": "Warning Unsafe To Atom",
    "description": "Creating atoms from unknown or external sources dynamically is a potentially unsafe operation because atoms are not garbage-collected by the runtime."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_unused_enum_operation",
    "title": "Warning Unused Enum Operation",
    "description": "With the exception of `Enum.each/2`, the result of a call to the Enum module's functions has to be used."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_unused_file_operation",
    "title": "Warning Unused File Operation",
    "description": "The result of a call to the File module's functions has to be used."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_unused_keyword_operation",
    "title": "Warning Unused Keyword Operation",
    "description": "The result of a call to the Keyword module's functions has to be used."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_unused_list_operation",
    "title": "Warning Unused List Operation",
    "description": "The result of a call to the List module's functions has to be used."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_unused_path_operation",
    "title": "Warning Unused Path Operation",
    "description": "The result of a call to the Path module's functions has to be used."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_unused_regex_operation",
    "title": "Warning Unused Regex Operation",
    "description": "The result of a call to the Regex module's functions has to be used."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_unused_string_operation",
    "title": "Warning Unused String Operation",
    "description": "The result of a call to the String module's functions has to be used."
  },
  {
    "timeToFix": 5,
    "patternId": "warning_unused_tuple_operation",
    "title": "Warning Unused Tuple Operation",
    "description": "The result of a call to the Tuple module's functions has to be used."
  }
]